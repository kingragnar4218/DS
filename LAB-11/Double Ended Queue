#include <stdio.h>
#include <stdlib.h>

#define MAX 5

struct Deque {
    int front, rear;
    int array[MAX];
};

// Function to initialize deque
void initDeque(struct Deque *deque) {
    deque->front = -1;
    deque->rear = -1;
}

// Function to check if deque is full
int isFull(struct Deque *deque) {
    return ((deque->rear + 1) % MAX == deque->front);
}

// Function to check if deque is empty
int isEmpty(struct Deque *deque) {
    return (deque->front == -1);
}

// Function to add an element to the front
void enqueueFront(struct Deque *deque, int value) {
    if (isFull(deque)) {
        printf("Deque is full!\n");
        return;
    }
    if (isEmpty(deque)) {
        deque->front = 0;
        deque->rear = 0;
    } else {
        deque->front = (deque->front - 1 + MAX) % MAX;
    }
    deque->array[deque->front] = value;
    printf("Inserted %d at front\n", value);
}

// Function to add an element to the rear
void enqueueRear(struct Deque *deque, int value) {
    if (isFull(deque)) {
        printf("Deque is full!\n");
        return;
    }
    if (isEmpty(deque)) {
        deque->front = 0;
        deque->rear = 0;
    } else {
        deque->rear = (deque->rear + 1) % MAX;
    }
    deque->array[deque->rear] = value;
    printf("Inserted %d at rear\n", value);
}

// Function to remove an element from the front
void dequeueFront(struct Deque *deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty!\n");
        return;
    }
    printf("Removed %d from front\n", deque->array[deque->front]);
    if (deque->front == deque->rear) {
        deque->front = -1;
        deque->rear = -1;
    } else {
        deque->front = (deque->front + 1) % MAX;
    }
}

// Function to remove an element from the rear
void dequeueRear(struct Deque *deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty!\n");
        return;
    }
    printf("Removed %d from rear\n", deque->array[deque->rear]);
    if (deque->front == deque->rear) {
        deque->front = -1;
        deque->rear = -1;
    } else {
        deque->rear = (deque->rear - 1 + MAX) % MAX;
    }
}

// Function to display the deque elements
void display(struct Deque *deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty!\n");
        return;
    }
    printf("Deque elements: ");
    int i = deque->front;
    while (1) {
        printf("%d ", deque->array[i]);
        if (i == deque->rear) break;
        i = (i + 1) % MAX;
    }
    printf("\n");
}

int main() {
    struct Deque deque;
    initDeque(&deque);
    int choice, value;
    
    while (1) {
        printf("\nDouble Ended Queue Menu:\n");
        printf("1. Enqueue Front\n");
        printf("2. Enqueue Rear\n");
        printf("3. Dequeue Front\n");
        printf("4. Dequeue Rear\n");
        printf("5. Display\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("Enter value to enqueue at front: ");
                scanf("%d", &value);
                enqueueFront(&deque, value);
                break;
            case 2:
                printf("Enter value to enqueue at rear: ");
                scanf("%d", &value);
                enqueueRear(&deque, value);
                break;
            case 3:
                dequeueFront(&deque);
                break;
            case 4:
                dequeueRear(&deque);
                break;
            case 5:
                display(&deque);
                break;
            case 6:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}
