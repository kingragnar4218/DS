#include <stdio.h>
#include <stdlib.h>

#define MAX 5

struct CircularQueue {
    int front, rear;
    int array[MAX];
};

// Function to initialize queue
void initQueue(struct CircularQueue *queue) {
    queue->front = -1;
    queue->rear = -1;
}

// Function to check if queue is full
int isFull(struct CircularQueue *queue) {
    return ((queue->rear + 1) % MAX == queue->front);
}

// Function to check if queue is empty
int isEmpty(struct CircularQueue *queue) {
    return (queue->front == -1);
}

// Function to add an element to the queue (ENQUEUE)
void enqueue(struct CircularQueue *queue, int value) {
    if (isFull(queue)) {
        printf("Queue is full!\n");
        return;
    }
    if (isEmpty(queue)) {
        queue->front = 0;
    }
    queue->rear = (queue->rear + 1) % MAX;
    queue->array[queue->rear] = value;
    printf("Inserted %d\n", value);
}

// Function to remove an element from the queue (DEQUEUE)
void dequeue(struct CircularQueue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Removed %d\n", queue->array[queue->front]);
    if (queue->front == queue->rear) {
        queue->front = -1;
        queue->rear = -1;
    } else {
        queue->front = (queue->front + 1) % MAX;
    }
}

// Function to display the queue elements
void display(struct CircularQueue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Queue elements: ");
    int i = queue->front;
    while (1) {
        printf("%d ", queue->array[i]);
        if (i == queue->rear) break;
        i = (i + 1) % MAX;
    }
    printf("\n");
}

int main() {
    struct CircularQueue queue;
    initQueue(&queue);
    int choice, value;
    
    while (1) {
        printf("\nCircular Queue Menu:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("Enter value to enqueue: ");
                scanf("%d", &value);
                enqueue(&queue, value);
                break;
            case 2:
                dequeue(&queue);
                break;
            case 3:
                display(&queue);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}
